# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import telegramBot_pb2 as telegramBot__pb2


class BotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAllVacancies = channel.unary_unary(
                '/telegramBot.BotService/getAllVacancies',
                request_serializer=telegramBot__pb2.Empty.SerializeToString,
                response_deserializer=telegramBot__pb2.VacanciesResponse.FromString,
                )
        self.getVacancyRequirements = channel.unary_unary(
                '/telegramBot.BotService/getVacancyRequirements',
                request_serializer=telegramBot__pb2.VacancyRequirementsRequest.SerializeToString,
                response_deserializer=telegramBot__pb2.VacancyRequirementsResponse.FromString,
                )
        self.getCompanyInfo = channel.unary_unary(
                '/telegramBot.BotService/getCompanyInfo',
                request_serializer=telegramBot__pb2.Empty.SerializeToString,
                response_deserializer=telegramBot__pb2.CompanyInfoResponse.FromString,
                )
        self.sendCandidateInfo = channel.unary_unary(
                '/telegramBot.BotService/sendCandidateInfo',
                request_serializer=telegramBot__pb2.CandidateRequest.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.newInfoAdded = channel.unary_unary(
                '/telegramBot.BotService/newInfoAdded',
                request_serializer=telegramBot__pb2.CompanyInfoRequest.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.newRequirementAdded = channel.unary_unary(
                '/telegramBot.BotService/newRequirementAdded',
                request_serializer=telegramBot__pb2.AddedRequirement.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.newVacancyAdded = channel.unary_unary(
                '/telegramBot.BotService/newVacancyAdded',
                request_serializer=telegramBot__pb2.AddedVacancy.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )


class BotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAllVacancies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVacancyRequirements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCompanyInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendCandidateInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newInfoAdded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newRequirementAdded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newVacancyAdded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAllVacancies': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllVacancies,
                    request_deserializer=telegramBot__pb2.Empty.FromString,
                    response_serializer=telegramBot__pb2.VacanciesResponse.SerializeToString,
            ),
            'getVacancyRequirements': grpc.unary_unary_rpc_method_handler(
                    servicer.getVacancyRequirements,
                    request_deserializer=telegramBot__pb2.VacancyRequirementsRequest.FromString,
                    response_serializer=telegramBot__pb2.VacancyRequirementsResponse.SerializeToString,
            ),
            'getCompanyInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getCompanyInfo,
                    request_deserializer=telegramBot__pb2.Empty.FromString,
                    response_serializer=telegramBot__pb2.CompanyInfoResponse.SerializeToString,
            ),
            'sendCandidateInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.sendCandidateInfo,
                    request_deserializer=telegramBot__pb2.CandidateRequest.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'newInfoAdded': grpc.unary_unary_rpc_method_handler(
                    servicer.newInfoAdded,
                    request_deserializer=telegramBot__pb2.CompanyInfoRequest.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'newRequirementAdded': grpc.unary_unary_rpc_method_handler(
                    servicer.newRequirementAdded,
                    request_deserializer=telegramBot__pb2.AddedRequirement.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'newVacancyAdded': grpc.unary_unary_rpc_method_handler(
                    servicer.newVacancyAdded,
                    request_deserializer=telegramBot__pb2.AddedVacancy.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telegramBot.BotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAllVacancies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/getAllVacancies',
            telegramBot__pb2.Empty.SerializeToString,
            telegramBot__pb2.VacanciesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVacancyRequirements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/getVacancyRequirements',
            telegramBot__pb2.VacancyRequirementsRequest.SerializeToString,
            telegramBot__pb2.VacancyRequirementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCompanyInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/getCompanyInfo',
            telegramBot__pb2.Empty.SerializeToString,
            telegramBot__pb2.CompanyInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendCandidateInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/sendCandidateInfo',
            telegramBot__pb2.CandidateRequest.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def newInfoAdded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/newInfoAdded',
            telegramBot__pb2.CompanyInfoRequest.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def newRequirementAdded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/newRequirementAdded',
            telegramBot__pb2.AddedRequirement.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def newVacancyAdded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/newVacancyAdded',
            telegramBot__pb2.AddedVacancy.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
