# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import telegramBot_pb2 as telegramBot__pb2


class BotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCache = channel.unary_unary(
                '/telegramBot.BotService/getCache',
                request_serializer=telegramBot__pb2.Empty.SerializeToString,
                response_deserializer=telegramBot__pb2.Cache.FromString,
                )
        self.sendCandidateInfo = channel.unary_unary(
                '/telegramBot.BotService/sendCandidateInfo',
                request_serializer=telegramBot__pb2.CandidateRequest.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.getCandidateInfo = channel.unary_unary(
                '/telegramBot.BotService/getCandidateInfo',
                request_serializer=telegramBot__pb2.TgId.SerializeToString,
                response_deserializer=telegramBot__pb2.CandidateRequest.FromString,
                )
        self.infoUpdated = channel.unary_unary(
                '/telegramBot.BotService/infoUpdated',
                request_serializer=telegramBot__pb2.UpdatedCompanyInfo.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.formUpdated = channel.unary_unary(
                '/telegramBot.BotService/formUpdated',
                request_serializer=telegramBot__pb2.UpdatedForm.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.vacancyUpdated = channel.unary_unary(
                '/telegramBot.BotService/vacancyUpdated',
                request_serializer=telegramBot__pb2.UpdatedVacancy.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )
        self.formToVacUpdated = channel.unary_unary(
                '/telegramBot.BotService/formToVacUpdated',
                request_serializer=telegramBot__pb2.UpdatedFormToVac.SerializeToString,
                response_deserializer=telegramBot__pb2.Empty.FromString,
                )


class BotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendCandidateInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCandidateInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def infoUpdated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def formUpdated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def vacancyUpdated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def formToVacUpdated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCache': grpc.unary_unary_rpc_method_handler(
                    servicer.getCache,
                    request_deserializer=telegramBot__pb2.Empty.FromString,
                    response_serializer=telegramBot__pb2.Cache.SerializeToString,
            ),
            'sendCandidateInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.sendCandidateInfo,
                    request_deserializer=telegramBot__pb2.CandidateRequest.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'getCandidateInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getCandidateInfo,
                    request_deserializer=telegramBot__pb2.TgId.FromString,
                    response_serializer=telegramBot__pb2.CandidateRequest.SerializeToString,
            ),
            'infoUpdated': grpc.unary_unary_rpc_method_handler(
                    servicer.infoUpdated,
                    request_deserializer=telegramBot__pb2.UpdatedCompanyInfo.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'formUpdated': grpc.unary_unary_rpc_method_handler(
                    servicer.formUpdated,
                    request_deserializer=telegramBot__pb2.UpdatedForm.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'vacancyUpdated': grpc.unary_unary_rpc_method_handler(
                    servicer.vacancyUpdated,
                    request_deserializer=telegramBot__pb2.UpdatedVacancy.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
            'formToVacUpdated': grpc.unary_unary_rpc_method_handler(
                    servicer.formToVacUpdated,
                    request_deserializer=telegramBot__pb2.UpdatedFormToVac.FromString,
                    response_serializer=telegramBot__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telegramBot.BotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/getCache',
            telegramBot__pb2.Empty.SerializeToString,
            telegramBot__pb2.Cache.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendCandidateInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/sendCandidateInfo',
            telegramBot__pb2.CandidateRequest.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCandidateInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/getCandidateInfo',
            telegramBot__pb2.TgId.SerializeToString,
            telegramBot__pb2.CandidateRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def infoUpdated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/infoUpdated',
            telegramBot__pb2.UpdatedCompanyInfo.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def formUpdated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/formUpdated',
            telegramBot__pb2.UpdatedForm.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def vacancyUpdated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/vacancyUpdated',
            telegramBot__pb2.UpdatedVacancy.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def formToVacUpdated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/telegramBot.BotService/formToVacUpdated',
            telegramBot__pb2.UpdatedFormToVac.SerializeToString,
            telegramBot__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
